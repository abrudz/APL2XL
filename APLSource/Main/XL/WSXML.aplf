 WSXML←{
  ⍝. ⍵ ←→ workbook namespace
     wb←⍵
     worksheet←'worksheet'
     wattrs←⊂'xmlns' 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'
     wattrs,←⊂'xmlns:r' 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'
     wattrs,←⊂'xmlns:mc' 'http://schemas.openxmlformats.org/markup-compatibility/2006'
     wattrs,←⊂'mc:Ignorable' 'x14ac xr xr2 xr3'
     wattrs,←⊂'xmlns:x14ac' 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac'
     wattrs,←⊂'xmlns:xr' 'http://schemas.microsoft.com/office/spreadsheetml/2014/revision'
     wattrs,←⊂'xmlns:xr2' 'http://schemas.microsoft.com/office/spreadsheetml/2015/revision2'
     wattrs,←⊂'xmlns:xr3' 'http://schemas.microsoft.com/office/spreadsheetml/2016/revision3'
     wattrs,←⊂'xr:uid' '{3D773BA2-D171-40D4-9636-0017C1E4D48B}'

     WSColumnNames←'Sheet Name' 'Address' 'Style' 'Value' 'Type' ⍝ // Should be unnecessary

     sheet←{
         ⍝. ⍵ ←→ all records in Worksheets.Table grouped by unique Table name
         ⍝. See: WSAdd for definition of each row of ⍵
         ⍝. Each unique sheet name in wb.WS corresponds to a unique file of the following format:
         ⍝. xl/worksheets/sheet{n}.xml
         ⍝. Returns: Generated XML to be written to a single sheet{n}.xml file

     ⍝. Helper functions
         flatten←{⊃,/,¨⍵}                              ⍝ a vector of cell indices
         offset←{⍺∘+¨⍳⍵}                               ⍝ offset ⍳⍵ from cell address ⍺
         rangeMap←{1≥≢⍵:⊃,/↓⍺ offset 1,⍵ ⋄ ⍺ offset ⍵} ⍝ generate the range of addresses starting at ⍺

     ⍝. Start by finding the shape of each range, and the largest shape in the sheet
         (sheetName address style value type isMerged)←↓⍉⍵
         rangeIndices←cti¨address    ⍝ used to generate address ranges
         shapes←{⍴1/⍵}¨value         ⍝ ensure that scalars are at least rank 1
         max←⊃⌈/rangeIndices+shapes  ⍝ find the maximum cell location in the sheet
         mergeCellsXML←⊃(∨/isMerged)/⊂isMerged WSMergeCells address(itc¨rangeIndices+shapes-1)

     ⍝. Generate indices for excel cells
         inds←flatten rangeIndices rangeMap¨shapes  ⍝ indices for each value in value
         order←⍋inds
         im←{⍵∧⍵⍲(⍴⍵)↑1∊⍵}¨(⍴¨value)⍴¨isMerged ⍝ boolean mask of cells that should contain their values, for merged cells only the first cell in a range should contain its value

     ⍝. Sort all of the cell meta data according to its index
         sInds←inds[order]
         cells←⊃{⍺,⍪⍵}/(⊂sInds),{(flatten ⍵)[order]}¨value type style ⍝ join the cell meta-data
         filterMergedVals←~{(flatten ⍵)[order]}im ⍝ boolean vector of where merged cells exist

         rowNumbers←⊃¨sInds
         rowNumbers←rowNumbers[g←⍋rowNumbers]

         cells←cells[g;]
         rowcellcount←{≢⍵}⌸rowNumbers ⍝ # of cells in each row

     ⍝. Populate default row heights if none exist
         drh←14.5                                ⍝ default row height
         pop←{0=≢⍵:{↑⍵,⍪drh\⍨≢⍵}∪rowNumbers ⋄ ⍵} ⍝populate with default height values
         rh←{⊃⍵[⍵[;0]⍳1↑sheetName;1]}wb.SheetRowHeights
         rhn h←↓⍉pop rh

     ⍝. Transform the cell meta data into an argument appropriate for ⎕XML
         (row r v c empty)←⊂∘,¨'row' 'r' 'v' 'c' ''
         rts←,¨'rts'                             ⍝ to share values
         rowProps←{'r' 'spans' 'ht' 'customHeight',⍪⍺'2:5'⍵ 1}
             heights   ←{(h,drh){(1+⍵)rowProps¨⍺[⍵⍳rhn]}rhn∪rowNumbers}
         rowxml    ←(0,row,empty),⍤1⍪heights 0
         cxml      ←(1,c,empty),⍤1 0⊂⍤2⍉⍤2⊢((≢cells),2 3)⍴rts,⍤1⊢(itc↑cells[;0]),cells[;2 3]
         vxml      ←(2,v),⍤1⊢(⍪cells[;1]),⊂⍬
         cellsxml  ←((2×≢cxml),4)⍴cxml,vxml
         xmlInput  ←{(rowxml⍪cellsxml)[⍋(⍳≢⍵),(2×(rhn∊∪rowNumbers)\rowcellcount)/⍳≢⍵;]}rhn∪rowNumbers
        ⍝  ⍝⍝⍝ need a better way to map from the specific row the data is in to the height of the row
        ⍝  ⍝⍝⍝ start from scratch
        ⍝  ⍝⍝⍝ {(h,drh)[rhn⍳⍵]}¨(⊃⌽max)/¨rhn
        ⍝  heights←{{(1+⍵)rowProps¨(h[⍵⍳rhn],(drh/⍨-/≢¨⍵ rhn))}rhn∪rowNumbers}
        ⍝  rowxml←(0,row,empty),⍤1⍪heights 0
        ⍝  cxml←(1,c,empty),⍤1 0⊂⍤2⍉⍤2⊢((≢cells),2 3)⍴rts,⍤1⊢(itc↑cells[;0]),cells[;2 3]
        ⍝  vxml←(2,v),⍤1⊢(⍪cells[;1]),⊂⍬
        ⍝  cellsxml←((2×≢cxml),4)⍴cxml,vxml
        ⍝  xmlInput←{(rowxml⍪cellsxml)[⍋x,(2×(1/⍨≢⍵)\rowcellcount)/(x←⍳≢⍵);]}∪rowNumbers

    ⍝. Generate XML
         rows←⎕XML xmlInput
         sheetdata←'sheetData'tag rows                          ⍝ part of <worksheet> body
         dimension←'dimension'(⊂'ref'('A1:',itc max))tag''      ⍝ part of <worksheet> body
         sheetViews←⊃wb.SheetViews[wb.SheetViews[;0]⍳1↑sheetName;1]
         ∊worksheet wattrs tag dimension sheetViews sheetdata mergeCellsXML
     }

     sheets←wb.WS
     tables←↑¨sheets[;WSColumnNames⍳⊂'Sheet Name']{⊂⍵}⌸↓sheets ⍝ group rows in table by sheetname
     (⍳≢tables)sheet¨tables                                    ⍝ build sheet xml per table
 }
